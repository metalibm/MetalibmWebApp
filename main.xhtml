<html>
    <head>
    <link rel="stylesheet"
          href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.0/build/styles/default.min.css"/>
          <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.0/build/highlight.min.js"></script>
          <script src="https://unpkg.com/muuri@0.8.0/dist/muuri.min.js"></script>
          <script>
hljs.initHighlightingOnLoad();

/* Global counter for optimization pass number.
 * used to generate a new id for a new pass */
var pass_number = ${len(registered_pass_list)};
		  </script>
		  <style>
				.board {
				  position: relative;
                  width: 100%;
				  margin-left: 1%;
				}
				.board-column {
				  position: absolute;
				  left: 0;
				  right: 0;
				  width: 90%;
				  margin: 0 1.5%;
				  background: #f0f0f0;
				  border-radius: 3px;
				  z-index: 1;
				}
				.board-column.muuri-item-releasing {
				  z-index: 2;
				}
				.board-column.muuri-item-dragging {
				  z-index: 3;
				  cursor: move;
				}
				.board-column-header {
				  position: relative;
				  height: 35px;
				  line-height: 35px;
				  overflow: hidden;
				  padding: 0 20px;
				  text-align: center;
				  background: #333;
				  color: #fff;
				  border-radius: 3px 3px 0 0;
				}
				@media (max-width: 600px) {
				  .board-column-header {
					text-indent: -1000px;
				  }
				}
				.board-column.todo .board-column-header {
				  background: #4A9FF9;
				}
				.board-column.working .board-column-header {
				  background: #f9944a;
				}
				.board-column.done .board-column-header {
				  background: #2ac06d;
				}
				.board-column-content {
				  position: relative;
				  border: 10px solid transparent;
				  min-height: 95px;
				}
				.board-item {
				  position: absolute;
				  width: 100%;
				  margin: 5px 0;
				}
				.board-item.muuri-item-releasing {
				  z-index: 9998;
				}
				.board-item.muuri-item-dragging {
				  z-index: 9999;
				  cursor: move;
				}
				.board-item.muuri-item-hidden {
				  z-index: 0;
				}
				.board-item-content {
				  position: relative;
				  padding: 10px;
				  background: #fff;
				  border-radius: 4px;
				  font-size: 17px;
				  cursor: pointer;
				  -webkit-box-shadow: 0px 1px 3px 0 rgba(0,0,0,0.2);
				  box-shadow: 0px 1px 3px 0 rgba(0,0,0,0.2);
				}
				@media (max-width: 600px) {
				  .board-item-content {
					text-align: center;
				  }
				  .board-item-content span {
					display: none;
				  }
				}

                .option_select {
                    width: 250px;
                }
                .option_label {
                    font-weight: bold;
                }
                .option_label_cell {
                    text-align: right;
                }

		  </style>
    </head>
	<body>
        <center>
		<table>
          <tr>
                <td colspan="2">
                    <p>
                        This web application is based on the tools <b>metalibm-lugdunum</b>, available on <a href="https://github.com/kalray/metalibm"> Kalray's github page </a>
                    </p>
                    <p> <b>Metalibm-lugdunum</b> is a code generator for elementary functions. It is part of a larger project <a href="http://metalibm.org"> metalibm.org</a>.
                    </p>
                    <p>
                        You can report issue with the web application <a href="https://github.com/metalibm/MetalibmWepApp/issues/new">there</a> and with metalibm <a href="https://github.com/kalray/metalibm/issues/new"> here </a>.
                    </p>
                </td>
          </tr>
          <tr>
              <td>
                  <b>Generation options:</b><br/>
              </td>
              <td>
                  <b>Code result:</b>
                <py:if test="not total_time is None">
                    <i> (generated in ${"{:.3f}".format(total_time)} second(s) </i>
                </py:if>
                  <br/>
              </td>
          </tr>
		  <tr>
		  <td width="500px" valign="top">
			<form action="function" method="get" >
                <table>
                    <tr>
                        <td width="150px" class="option_label_cell">
                            <label class="option_label">Function Name:</label>
                        </td>
                        <td width="350px">
                            <select name="name" id="name" class="option_select">
                                <py:for each="possible_name in function_name_list">
                                    <py:if test="name == possible_name">
                                        <option value="${possible_name}" selected="selected">${possible_name}</option>
                                    </py:if><py:else>
                                        <option value="${possible_name}">${possible_name}</option>
                                    </py:else>
                                </py:for>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Format:</label>
                        </td>
                        <td>
                            <select name="io_format" id="io_format" class="option_select">
                                <py:for each="io_format in format_list">
                                    <py:if test="precision == io_format">
                                        <option value="${io_format}" selected="selected">${io_format}</option>
                                    </py:if><py:else>
                                        <option value="${io_format}">${io_format}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Input Range:</label>
                        </td>
                        <td>
                            <input id="range_lo" size="5" name="range_lo" value="${range_lo}"></input>
                            <input id="range_hi" size="5" name="range_hi" value="${range_hi}"></input>
                            <py:if test="range_nan">
                                <input type="checkbox" name="range_nan" id="range_nan" value="True" checked="true"/>
                            </py:if><py:else>
                                <input type="checkbox" name="range_nan" id="range_nan" value="True"/>
                            </py:else>
                            NaN included.

                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Debug:</label>
                        </td>
                        <td>
                            <py:if test="debug">
                                <input type="checkbox" name="debug" id="debug" value="True" checked="true"/>
                            </py:if><py:else>
                                <input type="checkbox" name="debug" id="debug" value="True"/>
                            </py:else>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Vector size:</label>
                        </td>
                        <td>
                            <select name="vector_size" id="vector_size" class="option_select">
                                <py:for each="possible_vector_size in vector_size_list">
                                    <py:if test="possible_vector_size == vector_size">
                                        <option value="${possible_vector_size}" selected="selected">${possible_vector_size}</option>
                                    </py:if><py:else>
                                        <option value="${possible_vector_size}">${possible_vector_size}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Sub-Vector size:</label>
                        </td>
                        <td>
                            <select name="sub_vector_size" id="sub_vector_size" class="option_select">
                                <py:for each="possible_sub_vector_size in sub_vector_size_list">
                                    <py:if test="possible_sub_vector_size == sub_vector_size">
                                        <option value="${possible_sub_vector_size}" selected="selected">${possible_sub_vector_size}</option>
                                    </py:if><py:else>
                                        <option value="${possible_sub_vector_size}">${possible_sub_vector_size}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Target:</label>
                        </td>
                        <td>
                            <select name="target" id="target" class="option_select">
                                <py:for each="possible_target in target_list">
                                    <py:if test="possible_target == target">
                                        <option value="${possible_target}" selected="selected">${possible_target}</option>
                                    </py:if><py:else>
                                        <option value="${possible_target}">${possible_target}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Language:</label>
                        </td>
                        <td>
                            <select name="language" id="language" class="option_select">
                                <py:for each="possible_language in language_list">
                                    <py:if test="possible_language == language">
                                        <option value="${possible_language}" selected="selected">${possible_language}</option>
                                    </py:if><py:else>
                                        <option value="${possible_language}">${possible_language}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td valign="top" class="option_label_cell">
                            <label class="option_label">Pass List:</label>
                        </td>
                        <td>
			<div class="board">
			  <div class="board-column todo">
				<div class="board-column-header">Pass List</div>
				<div class="board-column-content">
                            <py:for each="pass_index, registered_pass in enumerate(registered_pass_list)">
                                <div class="board-item" id="pass_${pass_index}-${registered_pass}">
                                    <div class="board-item-content" id="${registered_pass}">
                                    ${registered_pass}
                                    <!--<a onclick="remove_pass('pass_${pass_index}-${registered_pass}')">Del</a>--> 
                                </div>
                            </div>
                            </py:for>
				</div>
			  </div>
			</div>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Add a new pass:</label>
                        </td>
                        <td>
                                <select name="new_pass" id="new_pass" class="option_select">
                                    <py:for each="possible_pass in available_pass_list">
                                            <option value="${possible_pass}">${possible_pass}</option>
                                    </py:for>
                                </select>
                               <input type="button" value="Add" onclick="add_new_pass()"/> 
                               <input type="hidden" id="registered_pass_list" name="registered_pass_list" value="${','.join(registered_pass_list)}"/>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell" style="text-align: center;" colspan="2">
                            <label class="option_label">Pre-configured flows</label><br/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <p style="text-align: center; font-size: 15px; font-weight: bold; color: red;"> Will clear every other registered passes </p>
                        </td>
                        <td>
                            <select style="width: 300px" id="preconf_flow">
                                <option value="llvm_flow">LLVM required passes</option>
                                <option value="vector_flow">Vector recommended passes</option>
                                <option value="x86_sse_flow">x86 SSE recommended passes</option>
                                <option value="x86_avx_flow">x86-AVX recommended passes</option>
                            </select>
                            <br/>
                            <center>
                                <input type="button" value="Clear and Add" onclick="add_preconf_flow()"/>
                            </center>

                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">
                            <br/>
                            <div style="text-align:center;">
                                    <input type="submit" value="Generate!"/>
                                    <input type="button" value="Clear!"  onclick="window.location.href = '${localhost}';"/>
                            </div>
                        </td>
                        <td>
                        </td>
                    </tr>
          <tr>
          </tr>
                </table>
			</form>
		  </td>
            <py:if test="error is None">
              <td width="500px">
                <pre>
                    <code class="C" style="overflow-y: scroll;height:500px; width: 500px; overflow-x: scroll;" id="rawSourceCode">
${code}
                    </code>
                </pre>
                    <!-- The button used to copy the text -->
					<input type="hidden" id="sourceCode" value="${code}"/>
                    <center>
                        <button onclick="copyCodeToClipboard()">Copy source code to clipboard</button>
                    </center>
              </td>
            </py:if><py:else>
                <td>
                    <div>
                        Error encountered:
                        <p py:content="literal(error)"></p>
                    </div>
                    <a href="${report_issue_url}"> Click here to report an issue </a>
                </td>

            </py:else>
		</tr>
		<tr>
			<td colspan="2" width="1000px">
                <b><u>Help:</u></b>

                <p> <b>Function name</b> is the name of the elementary function to generate</p>

                <p> <b>Format </b> is the input and output format.</p>

                <p> <b>Input range</b> is the input interval. By adding the pass <i> numerical_simplification</i> you can enable Metalibm to optimize the function using this range information. If <i>NaN included</i> is selected the range is forced to the full range of floating-point values in the given format. </p>

                <p> <b>Debug </b> triggers the insertion of various dynamic value print in the source code.</p>
                <p> <b>Vector size </b> is the input and output vector size. 1 corresponds to a scalar function. </p>
                <p> <b>Sub vector size </b> indicates which size of vector must be used to implement the vector function. Metalibm will generate replicated implementation for this sub-vector size and aggregate them to generate the full vector size implementation. </p>
                <p> <b>Target </b> indicates which backend must be used for code generation. </p>
                <p> <b>Language </b> indicates the output language. </p>

                <p> <b>Pass list</b> is the list of optimization pass executed on the intermediate representation. Select a new pass in the <b> Add a new pass</b> menu and click "Add" to insert it at the end of the optimization pipeline. You can re-order passes by dragging and dropping them. You can delete a pass by dragging it and dropping outside of the pass list box. 
                </p>
                <p>
                    <b><u>Some examples:</u></b>
                    <ul>
                        <py:for each="example_tag in example_map">
                                <li><a href="${example_map[example_tag]}">${example_tag}</a></li>
                        </py:for>
                    </ul>
                </p>
                <p> <b>To execute the generated source code:</b> </p>

			</td>
		</tr>
		<tr>
			<td colspan="2">
                <p> <i> This page is propulsed by <a href="https://turbogears.org/">TurboGears</a> and uses <a href="https://github.com/nandoflorestan/kajiki">kajiki</a> template, <a href="https://haltu.github.io/muuri/">muuri</a> and <a href="https://highlightjs.org/">highlightjs </a> </i></p> 
			</td>
		</tr>
	  </table>
      </center>
	</body>
          <script src="${localhost}/mwa.js"></script>
</html>
