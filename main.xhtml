<html>
    <head>
    <link rel="stylesheet"
          href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.0/build/styles/default.min.css"/>
          <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.0/build/highlight.min.js"></script>
          <script src="https://unpkg.com/muuri@0.8.0/dist/muuri.min.js"></script>
          <script>
			hljs.initHighlightingOnLoad();

		  </script>
		  <style>
				.board {
				  position: relative;
                  width: 100%;
				  margin-left: 1%;
				}
				.board-column {
				  position: absolute;
				  left: 0;
				  right: 0;
				  width: 90%;
				  margin: 0 1.5%;
				  background: #f0f0f0;
				  border-radius: 3px;
				  z-index: 1;
				}
				.board-column.muuri-item-releasing {
				  z-index: 2;
				}
				.board-column.muuri-item-dragging {
				  z-index: 3;
				  cursor: move;
				}
				.board-column-header {
				  position: relative;
				  height: 50px;
				  line-height: 50px;
				  overflow: hidden;
				  padding: 0 20px;
				  text-align: center;
				  background: #333;
				  color: #fff;
				  border-radius: 3px 3px 0 0;
				}
				@media (max-width: 600px) {
				  .board-column-header {
					text-indent: -1000px;
				  }
				}
				.board-column.todo .board-column-header {
				  background: #4A9FF9;
				}
				.board-column.working .board-column-header {
				  background: #f9944a;
				}
				.board-column.done .board-column-header {
				  background: #2ac06d;
				}
				.board-column-content {
				  position: relative;
				  border: 10px solid transparent;
				  min-height: 95px;
				}
				.board-item {
				  position: absolute;
				  width: 100%;
				  margin: 5px 0;
				}
				.board-item.muuri-item-releasing {
				  z-index: 9998;
				}
				.board-item.muuri-item-dragging {
				  z-index: 9999;
				  cursor: move;
				}
				.board-item.muuri-item-hidden {
				  z-index: 0;
				}
				.board-item-content {
				  position: relative;
				  padding: 20px;
				  background: #fff;
				  border-radius: 4px;
				  font-size: 17px;
				  cursor: pointer;
				  -webkit-box-shadow: 0px 1px 3px 0 rgba(0,0,0,0.2);
				  box-shadow: 0px 1px 3px 0 rgba(0,0,0,0.2);
				}
				@media (max-width: 600px) {
				  .board-item-content {
					text-align: center;
				  }
				  .board-item-content span {
					display: none;
				  }
				}

		  </style>
    </head>
	<body>
		<table>
		  <tr>
		  <td width="500px" valign="top">
			<form action="function" method="get" >
                <table>
                    <tr>
                        <td>
                            <label>Function Name:</label>
                        </td>
                        <td width="500px">
                            <select name="name" id="name">
                                <py:for each="possible_name in function_name_list">
                                    <py:if test="name == possible_name">
                                        <option value="${possible_name}" selected="selected">${possible_name}</option>
                                    </py:if><py:else>
                                        <option value="${possible_name}">${possible_name}</option>
                                    </py:else>
                                </py:for>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Format:</label>
                        </td>
                        <td>
                            <select name="io_format" id="io_format">
                                <py:for each="io_format in format_list">
                                    <py:if test="precision == io_format">
                                        <option value="${io_format}" selected="selected">${io_format}</option>
                                    </py:if><py:else>
                                        <option value="${io_format}">${io_format}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Vector size:</label>
                        </td>
                        <td>
                            <select name="vector_size" id="vector_size">
                                <py:for each="possible_vector_size in vector_size_list">
                                    <py:if test="possible_vector_size == vector_size">
                                        <option value="${possible_vector_size}" selected="selected">${possible_vector_size}</option>
                                    </py:if><py:else>
                                        <option value="${possible_vector_size}">${possible_vector_size}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>Target:</label>
                        </td>
                        <td>
                            <select name="target" id="target">
                                <py:for each="possible_target in target_list">
                                    <py:if test="possible_target == target">
                                        <option value="${possible_target}" selected="selected">${possible_target}</option>
                                    </py:if><py:else>
                                        <option value="${possible_target}">${possible_target}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label>PassList:</label>
                        </td>
                        <td>
			<div class="board">
			  <div class="board-column todo">
				<div class="board-column-header">Pass List</div>
				<div class="board-column-content">
                            <py:for each="pass_index, registered_pass in enumerate(registered_pass_list)">
                                <div class="board-item" id="pass_${pass_index}-${registered_pass}">
                                    <div class="board-item-content" id="${registered_pass}">
                                    ${registered_pass}
                                    <!--<a onclick="remove_pass('pass_${pass_index}-${registered_pass}')">Del</a>--> 
                                </div>
                            </div>
                            </py:for>
				</div>
			  </div>
			</div>
            Add a new pass:
                                <select name="new_pass" id="new_pass">
                                    <py:for each="possible_pass in available_pass_list">
                                            <option value="${possible_pass}">${possible_pass}</option>
                                    </py:for>
                                </select>
                               <input type="button" value="Add" onclick="add_new_pass()"/> 
                               <input type="hidden" id="registered_pass_list" name="registered_pass_list" value="${','.join(registered_pass_list)}"/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="submit" value="Generate!"/>
                        </td>
                        <td>
                        </td>
                    </tr>
                </table>
			</form>
		  </td>
		  <td width="500px">
            <pre>
                <code class="C" style="overflow-y: scroll;height:500px">
${code}
                </code>
            </pre>
		  </td>
		</tr>
		<tr>
			<td colspan="2">

		<!--
                <div class="board-item" id="item1"><div class="board-item-content"><span>Item #</span>1</div></div>
				  <div class="board-item" id="item2"><div class="board-item-content"><span>Item #</span>2</div></div>
				  <div class="board-item" id="item3"><div class="board-item-content"><span>Item #</span>3</div></div>
				  <div class="board-item" id="item4"><div class="board-item-content"><span>Item #</span>4</div></div>
				  <div class="board-item" id="item5"><div class="board-item-content"><span>Item #</span>5</div></div>
        -->
			</td>
		</tr>
	  </table>
	</body>
          <script>
				var itemContainers = [].slice.call(document.querySelectorAll('.board-column-content'));
				var columnGrids = [];
				var boardGrid;


                var pass_number = ${len(registered_pass_list)};


				// Define the column grids so we can drag those
				// items around.
				// itemContainers.forEach(function (container) {
				var container = itemContainers[0];
				

				  // Instantiate column grid.
				  var grid = new Muuri(container, {
					items: '.board-item',
					layoutDuration: 400,
					layoutEasing: 'ease',
					dragEnabled: true,
					dragSort: function () {
					  return columnGrids;
					},
					dragSortInterval: 0,
					dragContainer: document.body,
					dragReleaseDuration: 400,
					dragReleaseEasing: 'ease'
				  })
				  .on('dragStart', function (item) {
					// Let's set fixed widht/height to the dragged item
					// so that it does not stretch unwillingly when
					// it's appended to the document body for the
					// duration of the drag.
					item.getElement().style.width = item.getWidth() + 'px';
					item.getElement().style.height = item.getHeight() + 'px';
				  })
                  .on('dragEnd', function (item) {
                        console.log(item.getElement().id);
                        var board_pos = document.getElementsByClassName("board-column")[0].getBoundingClientRect();
                        console.log(board_pos);

                        var mouse_x = window.event.clientX;
                        var drag_start_x = item.getElement()._drag_start_x;
                        console.log(drag_start_x, mouse_x);
                        var delta = mouse_x - board_pos.x;
                        console.log(delta);
                        if (delta - board_pos.width > 200) {
                            grid.remove(item);
                            update_registered_pass_list();
                        }
                  })
				  .on('dragReleaseEnd', function (item) {
					// Let's remove the fixed width/height from the
					// dragged item now that it is back in a grid
					// column and can freely adjust to it's
					// surroundings.
					item.getElement().style.width = '';
					item.getElement().style.height = '';
					// Just in case, let's refresh the dimensions of all items
					// in case dragging the item caused some other items to
					// be different size.
					columnGrids.forEach(function (grid) {
					  grid.refreshItems();
                    update_registered_pass_list();
					});
				  })
				  .on('layoutStart', function () {
					// Let's keep the board grid up to date with the
					// dimensions changes of column grids.
					boardGrid.refreshItems().layout();
				  });

				  // Add the column grid reference to the column grids
				  // array, so we can access it later on.
				  columnGrids.push(grid);

				//});

				// Instantiate the board grid so we can drag those
				// columns around.
				boardGrid = new Muuri('.board', {
				  layoutDuration: 400,
				  layoutEasing: 'ease',
				  dragEnabled: true,
				  dragSortInterval: 0,
				  dragStartPredicate: {
					handle: '.board-column-header'
				  },
				  dragReleaseDuration: 400,
				  dragReleaseEasing: 'ease'
				});
                function remove_pass(pass_id_tag) {
                    var pass_elt = document.getElementById(pass_id_tag);
                    grid.remove([pass_elt], {removeElements: true})
                }
				function get_item_list() {
					return grid.getItems().map(item => item.getElement().id.split('-')[1]);
				}
				function create_new_item() {
					// var column = document.getElementsByClassName("board-column-content")[0];
					var new_item = document.createElement("div");
					var new_item_content = document.createElement("div");
					new_item_content.innerHTML = "Item #6";
					new_item_content.setAttribute("class", "board-item-content");
					new_item.appendChild(new_item_content);
					new_item.setAttribute("class", "board-item");
					new_item.setAttribute("id", "item6");
					grid.add(new_item);
					boardGrid.refreshItems().layout();
					
				}
                function update_registered_pass_list()
                {
                    // update hidden pass list
                    var new_pass_list = get_item_list();
                    document.getElementById("registered_pass_list").setAttribute("value", new_pass_list);
                    console.log("updating pass list to: ", new_pass_list);
                }

                function add_new_pass() {
                    var pass_name = document.getElementById("new_pass").value;
                    var item_id = pass_number.toString() + "-" + pass_name;
					var new_item = document.createElement("div");
					var new_item_content = document.createElement("div");
					new_item_content.innerHTML = pass_name;
					new_item_content.setAttribute("class", "board-item-content");

					new_item.appendChild(new_item_content);
					new_item.setAttribute("class", "board-item");
					new_item.setAttribute("id", item_id);
					grid.add(new_item);
					boardGrid.refreshItems().layout();

                    update_registered_pass_list();

                }
			</script>
</html>
