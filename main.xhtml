<html>
    <head>
    <link rel="stylesheet"
          href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.0/build/styles/default.min.css"/>
          <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.18.0/build/highlight.min.js"></script>
          <script src="https://unpkg.com/muuri@0.8.0/dist/muuri.min.js"></script>
          <script>
			hljs.initHighlightingOnLoad();

		  </script>
		  <style>
				.board {
				  position: relative;
                  width: 100%;
				  margin-left: 1%;
				}
				.board-column {
				  position: absolute;
				  left: 0;
				  right: 0;
				  width: 90%;
				  margin: 0 1.5%;
				  background: #f0f0f0;
				  border-radius: 3px;
				  z-index: 1;
				}
				.board-column.muuri-item-releasing {
				  z-index: 2;
				}
				.board-column.muuri-item-dragging {
				  z-index: 3;
				  cursor: move;
				}
				.board-column-header {
				  position: relative;
				  height: 35px;
				  line-height: 35px;
				  overflow: hidden;
				  padding: 0 20px;
				  text-align: center;
				  background: #333;
				  color: #fff;
				  border-radius: 3px 3px 0 0;
				}
				@media (max-width: 600px) {
				  .board-column-header {
					text-indent: -1000px;
				  }
				}
				.board-column.todo .board-column-header {
				  background: #4A9FF9;
				}
				.board-column.working .board-column-header {
				  background: #f9944a;
				}
				.board-column.done .board-column-header {
				  background: #2ac06d;
				}
				.board-column-content {
				  position: relative;
				  border: 10px solid transparent;
				  min-height: 95px;
				}
				.board-item {
				  position: absolute;
				  width: 100%;
				  margin: 5px 0;
				}
				.board-item.muuri-item-releasing {
				  z-index: 9998;
				}
				.board-item.muuri-item-dragging {
				  z-index: 9999;
				  cursor: move;
				}
				.board-item.muuri-item-hidden {
				  z-index: 0;
				}
				.board-item-content {
				  position: relative;
				  padding: 10px;
				  background: #fff;
				  border-radius: 4px;
				  font-size: 17px;
				  cursor: pointer;
				  -webkit-box-shadow: 0px 1px 3px 0 rgba(0,0,0,0.2);
				  box-shadow: 0px 1px 3px 0 rgba(0,0,0,0.2);
				}
				@media (max-width: 600px) {
				  .board-item-content {
					text-align: center;
				  }
				  .board-item-content span {
					display: none;
				  }
				}

                .option_select {
                    width: 250px;
                }
                .option_label {
                    font-weight: bold;
                }
                .option_label_cell {
                    text-align: right;
                }

		  </style>
    </head>
	<body>
        <center>
		<table>
          <tr>
                <td colspan="2">
                    <p>
                        This web application is based on the tools <b>metalibm-lugdunum</b>, available on <a href="https://github.com/kalray/metalibm"> Kalray's github page </a>
                    </p>
                    <p> <b>Metalibm-lugdunum</b> is a code generator for elementary functions. It is part of a larger project <a href="http://metalibm.org"> metalibm.org</a>.
                    </p>
                    <p>
                        You can report issue with the web application <a href="https://github.com/metalibm/MetalibmWepApp/issues/new">there</a> and with metalibm <a href="https://github.com/kalray/metalibm/issues/new"> here </a>.
                    </p>
                </td>
          </tr>
          <tr>
              <td>
                  <b>Generation options:</b><br/>
              </td>
              <td>
                  <b>Generated code result:</b><br/>
              </td>
          </tr>
		  <tr>
		  <td width="500px" valign="top">
			<form action="function" method="get" >
                <table>
                    <tr>
                        <td width="150px" class="option_label_cell">
                            <label class="option_label">Function Name:</label>
                        </td>
                        <td width="350px">
                            <select name="name" id="name" class="option_select">
                                <py:for each="possible_name in function_name_list">
                                    <py:if test="name == possible_name">
                                        <option value="${possible_name}" selected="selected">${possible_name}</option>
                                    </py:if><py:else>
                                        <option value="${possible_name}">${possible_name}</option>
                                    </py:else>
                                </py:for>
                            </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Format:</label>
                        </td>
                        <td>
                            <select name="io_format" id="io_format" class="option_select">
                                <py:for each="io_format in format_list">
                                    <py:if test="precision == io_format">
                                        <option value="${io_format}" selected="selected">${io_format}</option>
                                    </py:if><py:else>
                                        <option value="${io_format}">${io_format}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Debug:</label>
                        </td>
                        <td>
                            <py:if test="debug">
                                <input type="checkbox" name="debug" id="debug" value="True" checked="true"/>
                            </py:if><py:else>
                                <input type="checkbox" name="debug" id="debug" value="True"/>
                            </py:else>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Vector size:</label>
                        </td>
                        <td>
                            <select name="vector_size" id="vector_size" class="option_select">
                                <py:for each="possible_vector_size in vector_size_list">
                                    <py:if test="possible_vector_size == vector_size">
                                        <option value="${possible_vector_size}" selected="selected">${possible_vector_size}</option>
                                    </py:if><py:else>
                                        <option value="${possible_vector_size}">${possible_vector_size}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Sub-Vector size:</label>
                        </td>
                        <td>
                            <select name="sub_vector_size" id="sub_vector_size" class="option_select">
                                <py:for each="possible_sub_vector_size in sub_vector_size_list">
                                    <py:if test="possible_sub_vector_size == sub_vector_size">
                                        <option value="${possible_sub_vector_size}" selected="selected">${possible_sub_vector_size}</option>
                                    </py:if><py:else>
                                        <option value="${possible_sub_vector_size}">${possible_sub_vector_size}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Target:</label>
                        </td>
                        <td>
                            <select name="target" id="target" class="option_select">
                                <py:for each="possible_target in target_list">
                                    <py:if test="possible_target == target">
                                        <option value="${possible_target}" selected="selected">${possible_target}</option>
                                    </py:if><py:else>
                                        <option value="${possible_target}">${possible_target}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Language:</label>
                        </td>
                        <td>
                            <select name="language" id="language" class="option_select">
                                <py:for each="possible_language in language_list">
                                    <py:if test="possible_language == language">
                                        <option value="${possible_language}" selected="selected">${possible_language}</option>
                                    </py:if><py:else>
                                        <option value="${possible_language}">${possible_language}</option>
                                    </py:else>
                                </py:for>
                        </select>
                        </td>
                    </tr>
                    <tr>
                        <td valign="top" class="option_label_cell">
                            <label class="option_label">Pass List:</label>
                        </td>
                        <td>
			<div class="board">
			  <div class="board-column todo">
				<div class="board-column-header">Pass List</div>
				<div class="board-column-content">
                            <py:for each="pass_index, registered_pass in enumerate(registered_pass_list)">
                                <div class="board-item" id="pass_${pass_index}-${registered_pass}">
                                    <div class="board-item-content" id="${registered_pass}">
                                    ${registered_pass}
                                    <!--<a onclick="remove_pass('pass_${pass_index}-${registered_pass}')">Del</a>--> 
                                </div>
                            </div>
                            </py:for>
				</div>
			  </div>
			</div>
                        </td>
                    </tr>
                    <tr>
                        <td class="option_label_cell">
                            <label class="option_label">Add a new pass:</label>
                        </td>
                        <td>
                                <select name="new_pass" id="new_pass" class="option_select">
                                    <py:for each="possible_pass in available_pass_list">
                                            <option value="${possible_pass}">${possible_pass}</option>
                                    </py:for>
                                </select>
                               <input type="button" value="Add" onclick="add_new_pass()"/> 
                               <input type="hidden" id="registered_pass_list" name="registered_pass_list" value="${','.join(registered_pass_list)}"/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div style="text-align:center;">
                                <input type="submit" value="Generate!"/>
                                <input type="button" value="Clear!"  onclick="window.location.href = 'http://${localhost}';"/>
                            </div>
                        </td>
                        <td>
                        </td>
                    </tr>
          <tr>
          </tr>
                </table>
			</form>
		  </td>
            <py:if test="error is None">
              <td width="500px">
                <pre>
                    <code class="C" style="overflow-y: scroll;height:500px" id="rawSourceCode">
${code}
                    </code>
                </pre>
                    <!-- The button used to copy the text -->
					<input type="hidden" id="sourceCode" value="${code}"/>
                    <center>
                        <button onclick="copyCodeToClipboard()">Copy source code to clipboard</button>
                    </center>
              </td>
            </py:if><py:else>
                <td>
                    <div>
                        Error encountered:
                        ${error}$ 
                    </div>
                    <a href="${report_issue_url}"> Click here to report an issue </a>
                </td>

            </py:else>
		</tr>
		<tr>
			<td colspan="2" width="1000px">
                <b><u>Help:</u></b>

                <p> <b>Function name</b> is the name of the elementary function to generate</p>

                <p> <b>Pass list</b> is the list of optimization pass executed on the intermediate representation. Select a new pass in the <b> Add a new pass</b> menu and click "Add" to insert it at the end of the optimization pipeline. You can re-order passes by dragging and dropping them. You can delete a pass by dragging it and dropping outside of the pass list box. 
                </p>
                <b><u>Some examples:</u></b>
                <ul>
                    <py:for each="example_tag in example_map">
                            <li><a href="${example_map[example_tag]}">${example_tag}</a></li>
                    </py:for>
                </ul>
			</td>
		</tr>
		<tr>
			<td colspan="2">
                <p> <i> This page is propulsed by <a href="https://turbogears.org/">TurboGears</a> and uses <a href="https://github.com/nandoflorestan/kajiki">kajiki</a> template, <a href="https://haltu.github.io/muuri/">muuri</a> and <a href="https://highlightjs.org/">highlightjs </a> </i></p> 
			</td>
		</tr>
	  </table>
      </center>
	</body>
          <script>
				var itemContainers = [].slice.call(document.querySelectorAll('.board-column-content'));
				var columnGrids = [];
				var boardGrid;


                var pass_number = ${len(registered_pass_list)};


				// Define the column grids so we can drag those
				// items around.
				// itemContainers.forEach(function (container) {
				var container = itemContainers[0];
				

				  // Instantiate column grid.
				  var grid = new Muuri(container, {
					items: '.board-item',
					layoutDuration: 400,
					layoutEasing: 'ease',
					dragEnabled: true,
					dragSort: function () {
					  return columnGrids;
					},
					dragSortInterval: 0,
					dragContainer: document.body,
					dragReleaseDuration: 400,
					dragReleaseEasing: 'ease'
				  })
				  .on('dragStart', function (item) {
					// Let's set fixed widht/height to the dragged item
					// so that it does not stretch unwillingly when
					// it's appended to the document body for the
					// duration of the drag.
					item.getElement().style.width = item.getWidth() + 'px';
					item.getElement().style.height = item.getHeight() + 'px';
				  })
                  .on('dragEnd', function (item) {
                        console.log(item.getElement().id);
                        var board_pos = document.getElementsByClassName("board-column")[0].getBoundingClientRect();
                        console.log(board_pos);

                        var mouse_x = window.event.clientX;
                        var drag_start_x = item.getElement()._drag_start_x;
                        console.log(drag_start_x, mouse_x);
                        var delta = mouse_x - board_pos.x;
                        console.log(delta);
                        if (delta - board_pos.width > 200) {
                            grid.remove(item);
                            update_registered_pass_list();
                        }
                  })
				  .on('dragReleaseEnd', function (item) {
					// Let's remove the fixed width/height from the
					// dragged item now that it is back in a grid
					// column and can freely adjust to it's
					// surroundings.
					item.getElement().style.width = '';
					item.getElement().style.height = '';
					// Just in case, let's refresh the dimensions of all items
					// in case dragging the item caused some other items to
					// be different size.
					columnGrids.forEach(function (grid) {
					  grid.refreshItems();
                    update_registered_pass_list();
					});
				  })
				  .on('layoutStart', function () {
					// Let's keep the board grid up to date with the
					// dimensions changes of column grids.
					boardGrid.refreshItems().layout();
				  });

				  // Add the column grid reference to the column grids
				  // array, so we can access it later on.
				  columnGrids.push(grid);

				//});

				// Instantiate the board grid so we can drag those
				// columns around.
				boardGrid = new Muuri('.board', {
				  layoutDuration: 400,
				  layoutEasing: 'ease',
				  dragEnabled: true,
				  dragSortInterval: 0,
				  dragStartPredicate: {
					handle: '.board-column-header'
				  },
				  dragReleaseDuration: 400,
				  dragReleaseEasing: 'ease'
				});
                function remove_pass(pass_id_tag) {
                    var pass_elt = document.getElementById(pass_id_tag);
                    grid.remove([pass_elt], {removeElements: true})
                }
				function get_item_list() {
					return grid.getItems().map(item => item.getElement().id.split('-')[1]);
				}
				function create_new_item() {
					// var column = document.getElementsByClassName("board-column-content")[0];
					var new_item = document.createElement("div");
					var new_item_content = document.createElement("div");
					new_item_content.innerHTML = "Item #6";
					new_item_content.setAttribute("class", "board-item-content");
					new_item.appendChild(new_item_content);
					new_item.setAttribute("class", "board-item");
					new_item.setAttribute("id", "item6");
					grid.add(new_item);
					boardGrid.refreshItems().layout();
					
				}
                function update_registered_pass_list()
                {
                    // update hidden pass list
                    var new_pass_list = get_item_list();
                    document.getElementById("registered_pass_list").setAttribute("value", new_pass_list);
                    console.log("updating pass list to: ", new_pass_list);
                }

                function add_new_pass() {
                    var pass_name = document.getElementById("new_pass").value;
                    var item_id = pass_number.toString() + "-" + pass_name;
					var new_item = document.createElement("div");
					var new_item_content = document.createElement("div");
					new_item_content.innerHTML = pass_name;
					new_item_content.setAttribute("class", "board-item-content");

					new_item.appendChild(new_item_content);
					new_item.setAttribute("class", "board-item");
					new_item.setAttribute("id", item_id);
					grid.add(new_item);
					boardGrid.refreshItems().layout();

                    update_registered_pass_list();
                }

function copyCodeToClipboard() {
	var copyText = document.getElementById("sourceCode");
	updateClipboard(copyText.value)
	//navigator.permissions.query({name: "clipboard-write"}).then(result => { 
	//  if (result.state == "granted" || result.state == "prompt") {
	//	/* write to the clipboard now */
	//	navigator.clipboard.writeText(copyText.value)
	//  }
	//});
}

/** Copying data to clipboard */
function updateClipboard(newClip) {
    navigator.clipboard.writeText(newClip).then(function() {
        /* clipboard successfully set */
    }, function() {
        /* clipboard write failed */
        alert("copy in clipboard failed");
    });
}

			</script>
</html>
